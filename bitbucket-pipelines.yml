# Változók:
# $PROJECT_NAME - Registryről a projektek nevei.
# $SSH_USER_NAME - A szerver ssh user neve.
# $PROD_SERVER_IP - A prod szerver IP címe ahol futnak majd a konténerek.
# $PROD_SERVER_NAME - A prod szerver neve.
# $DEV_SERVER_IP - A dev szerver IP címe ahol futnak majd a konténerek.
# $DEV_SERVER_NAME - A dev szerver neve.
# $DOMAIN_NAME - Cloudflare domain néve.
# $SLACK_CHANEL - Ahova küldi az értesítést.
# $PROD_DOMAIN_NAME - Slack üzenetben megjelenített url(prod).
# $DEV_DOMAIN_NAME - Slack üzenetben megjelenített url(dev).
# $CONTAINER_NAME - Konténer neve.
# $REGISTRY_USERNAME - Registry felhasználó neve.
# $REGISTRY_PASSWORD - Registry felhasználó jelszava.



image: registry.wtf/adroit/builder:latest

definitions:
  services:
    docker:
      memory: 2048

pipelines:
  caches:
    - docker

  branches:
    '{master}':
      - step:
          name: Build
          #runs-on: self.hosted
          services:
            - docker
          script:
            - docker login registry.wtf --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
            - docker build -t registry.wtf/$PROJECT_NAME/frontend-prod --build-arg ENV=production .
            - docker push registry.wtf/$PROJECT_NAME/frontend-prod
      - step:
         name: Deployment
         deployment: production
         script:
           - echo "Deploying to production environment"
           - pipe: atlassian/ssh-run:0.2.2
             variables:
               SSH_USER: '$PROD_SSH_USER_NAME'
               SERVER: '$PROD_SERVER_IP'
               COMMAND: >
                  mkdir -p /srv/$DOMAIN_NAME/$DOMAIN_NAME-prod &&
                  cd /srv/$DOMAIN_NAME/$DOMAIN_NAME-prod &&
                  sudo docker-compose pull &&
                  sudo docker-compose up -d
      - step:
         name: Cache clear
         clone:
            enabled: false
         script:
           - cf-cache-clear $DOMAIN_NAME
      - step:
         name: Notification
         clone:
            enabled: false
         script:
           - echo "Sending Slack notification"
           - slack-simple --url $PROD_DOMAIN_NAME --channel $SLACK_CHANEL --code prod --server $SERVER_NAME --container $CONTAINER_NAME
           
    '{develop}':
      - step:
          name: Build
          #runs-on: self.hosted
          services:
            - docker
          script:
            - docker login registry.wtf --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD
            - docker build -t registry.wtf/$PROJECT_NAME/frontend-fat --build-arg ENV=fat .
            - docker push registry.wtf/$PROJECT_NAME/frontend-fat
      - step:
         name: Deployment
         deployment: test
         clone:
            enabled: false
         script:
           - echo "Deploying to FAT environment"
           - pipe: atlassian/ssh-run:0.2.2
             variables:
               SSH_USER: '$DEV_SSH_USER_NAME'
               SERVER: '$DEV_SERVER_IP'
               COMMAND: >
                  mkdir -p /srv/$DOMAIN_NAME/$DOMAIN_NAME-fat &&
                  cd /srv/$DOMAIN_NAME/$DOMAIN_NAME-fat &&
                  sudo docker-compose pull &&
                  sudo docker-compose up -d
      - step:
         name: Cache clear
         clone:
            enabled: false
         script:
           - cf-cache-clear $DOMAIN_NAME
      - step:
         name: Notification
         clone:
            enabled: false
         script:
           - echo "Sending Slack notification"
           - slack-simple --url $DEV_DOMAIN_NAME --channel $SLACK_CHANEL --code fat --server $SERVER_NAME --container $CONTAINER_NAME